{"version":3,"sources":["reducers/tasks/task-actions.ts","types/filter-enum.ts","components/Task-Form.tsx","components/Task-Item.tsx","containers/Task-List-Container.tsx","App.tsx","reportWebVitals.ts","reducers/tasks/tasks-reducer.ts","reducers/root-reducer.ts","store.ts","index.tsx"],"names":["TaskActionsTypes","filterTypes","setTasks","payload","type","FETCH_TASKS","addTask","newTask","CREATE_TASK","replaceTask","updatedTask","REPLACE_TASK","removeTask","id","REMOVE_TASK","styles","itemStyle","padding","borderColor","borderWidth","borderStyle","headerStyle","margin","saveButtonStyle","marginTop","updateFormStyle","display","flexDirection","justifyContent","width","alignItems","marginLeft","marginBottom","TaskForm","props","emptyTask","title","description","complete","useState","task","setNewTask","handleFormUpdate","event","field","target","name","value","handleEmitUpdate","emitUpdate","style","htmlFor","onChange","className","onClick","handleSave","disabled","descStyle","editButtonStyle","position","right","deleteButtonStyle","completeButtonStyle","none","backgroundColor","TaskItem","setUpdatedTask","isSelected","selectedTaskId","updateTask","selectTask","deleteTask","textDecoration","checked","containerStyle","horizontal","paddingTop","paddingBottom","radioStyle","marginRight","TaskListContainer","selectTaskForEditing","bind","createTask","filterTasks","this","fetchItems","filter","all","incomplete","tasks","map","Component","connect","state","ownProps","filteredTasks","dispatch","a","axios","get","then","response","data","fetchTasks","SELECT_TASK","post","put","delete","FILTER_TASKS","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","taskReducer","action","merge","append","set","lensProp","update","findIndex","propEq","updatedTasks","remove","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","next","console","group","info","result","log","getState","groupEnd","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.d507e5de.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { AxiosResponse } from 'axios';\r\nimport { ITask } from \"../../../shared/types/i-task\";\r\nimport { IAction } from \"../../../shared/types/i-action\";\r\nimport { filterTypes } from \"../../types/filter-enum\";\r\n\r\nexport enum TaskActionsTypes {\r\n    CREATE_TASK = 'CREATE_TASK',\r\n    FETCH_TASKS = 'FETCH_TASKS',\r\n    SELECT_TASK = 'SELECT_TASK',\r\n    REPLACE_TASK = 'REPLACE_TASK',\r\n    REMOVE_TASK = 'REMOVE_TASK',\r\n    FILTER_TASKS = 'FILTER_TASKS',\r\n}\r\n\r\nexport const fetchTasks = (dispatch) => {\r\n    return async () => {\r\n        axios.get(\"/api/tasks\").then(response => {\r\n            dispatch(setTasks(response.data));\r\n        });\r\n    };\r\n};\r\n\r\nconst setTasks = (payload: ITask[]) => ({type: TaskActionsTypes.FETCH_TASKS, payload: payload});\r\n\r\nexport const createTask = (dispatch, newTask: ITask) => {\r\n    return async (): Promise<void> => {\r\n        axios.post('api/tasks', newTask).then((response: AxiosResponse<ITask>) => {\r\n            dispatch(addTask(response.data))\r\n        })\r\n    }\r\n}\r\n\r\nconst addTask = (newTask: ITask): IAction => ({type: TaskActionsTypes.CREATE_TASK, payload: newTask});\r\n\r\nexport const selectTask = (dispatch, id: string) => dispatch({type: TaskActionsTypes.SELECT_TASK, payload: id});\r\n\r\nexport const updateTask = (dispatch, updatedTask: ITask) => {\r\n    return async () => {\r\n        axios.put(`api/tasks/${updatedTask.id}`, updatedTask).then((response: AxiosResponse<ITask>) => {\r\n            dispatch(replaceTask(updatedTask));\r\n        })\r\n    }\r\n}\r\n\r\nconst replaceTask = (updatedTask: ITask): IAction => ({type: TaskActionsTypes.REPLACE_TASK, payload: updatedTask});\r\n\r\n\r\nexport const deleteTask = (dispatch, id: string) => {\r\n    return async () => {\r\n        axios.delete(`api/tasks/${id}`).then((response: AxiosResponse<ITask>) => {\r\n            dispatch(removeTask(id));\r\n        })\r\n    }\r\n}\r\n\r\nconst removeTask = (id: string): IAction => ({type: TaskActionsTypes.REMOVE_TASK, payload: id});\r\n\r\nexport const filterTasks = (dispatch, filter: filterTypes) => dispatch({type: TaskActionsTypes.FILTER_TASKS, payload: filter});\r\n","export enum filterTypes {\r\n    all = 'all',\r\n    complete = 'complete',\r\n    incomplete = 'incomplete',\r\n}\r\n","import React, { useState } from 'react';\r\nimport { ITask } from \"../../shared/types/i-task\";\r\n\r\ninterface ITaskFormProps {\r\n    task?: ITask,\r\n    handleSave?: (task: ITask) => void,\r\n    handleEmitUpdate?: (task: ITask) => void\r\n}\r\n\r\nconst styles = {\r\n    itemStyle: {\r\n        padding: 7,\r\n        borderColor: 'lightgray',\r\n        borderWidth: 1,\r\n        borderStyle: 'solid',\r\n    },\r\n    headerStyle: {\r\n        padding: 0,\r\n        margin: 0\r\n    },\r\n    saveButtonStyle: {\r\n        marginTop: 7\r\n    },\r\n    updateFormStyle: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        width: '60%',\r\n        alignItems: 'center',\r\n        marginLeft: '20%',\r\n        marginBottom: 20,\r\n    } as React.CSSProperties\r\n}\r\n\r\nconst TaskForm = (props: ITaskFormProps) => {\r\n    let emptyTask: ITask = { title: '', description: '', complete: false };\r\n    let [newTask, setNewTask] = useState(props.task ? props.task : emptyTask);\r\n\r\n    const save = () => {\r\n        props.handleSave(newTask);\r\n        setNewTask(emptyTask);\r\n    }\r\n\r\n    const handleFormUpdate = (event) => {\r\n        let field = event.target.name;\r\n        newTask = { ...newTask, [field]: event.target.value }\r\n        if (props.handleEmitUpdate) {\r\n            emitUpdate(newTask)\r\n        }\r\n        setNewTask(newTask);\r\n    }\r\n\r\n    const emitUpdate = (task: ITask) => {\r\n        props.handleEmitUpdate(task);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            < div style={styles.updateFormStyle}>\r\n\r\n                <label htmlFor=\"title\">Task</label>\r\n                <input id=\"title\"\r\n                       name=\"title\"\r\n                       type=\"text\"\r\n                       value={newTask.title}\r\n                       onChange={handleFormUpdate}/>\r\n                <label htmlFor=\"desc\">Description</label>\r\n                <input id=\"desc\"\r\n                       name=\"description\"\r\n                       type=\"text\"\r\n                       value={newTask.description}\r\n                       onChange={handleFormUpdate}/>\r\n                {!props.task &&\r\n                <button className=\"btn btn-xs btn-success\"\r\n                        style={styles.saveButtonStyle}\r\n                        onClick={save}\r\n                disabled={!newTask.title}>Save\r\n                </button>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskForm;\r\n","import React, { useState } from 'react';\r\nimport { ITask } from \"../../shared/types/i-task\";\r\nimport { type } from \"os\";\r\nimport TaskForm from \"./Task-Form\";\r\n\r\ninterface ITaskItemProps {\r\n    task: ITask,\r\n    selectedTaskId: string,\r\n    selectTask: (id: string) => void,\r\n    updateTask: (task: ITask) => void\r\n    deleteTask: (id: string) => void\r\n}\r\n\r\nconst styles = {\r\n    itemStyle: {\r\n        padding: 7,\r\n        borderColor: 'lightgray',\r\n        borderWidth: 1,\r\n        borderStyle: 'solid',\r\n    },\r\n    headerStyle: {\r\n        padding: 0,\r\n        margin: 0\r\n    },\r\n    descStyle: {\r\n        padding: 0,\r\n        margin: 0\r\n    },\r\n    editButtonStyle: {\r\n        position: 'absolute',\r\n        right: '14%',\r\n    } as React.CSSProperties,\r\n    saveButtonStyle: {\r\n        position: 'absolute',\r\n        right: '14%',\r\n        marginTop: -100\r\n    } as React.CSSProperties,\r\n    deleteButtonStyle: {\r\n        position: 'absolute',\r\n        right: '14%',\r\n        marginTop: 100\r\n    } as React.CSSProperties,\r\n    completeButtonStyle: {\r\n        position: 'absolute',\r\n        right: '14%',\r\n        marginTop: -17\r\n    } as React.CSSProperties,\r\n    none: {\r\n        display: 'none'\r\n    },\r\n    updateFormStyle: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '60%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginLeft: '20%',\r\n        backgroundColor: 'lightgray'\r\n    } as React.CSSProperties\r\n}\r\n\r\nconst TaskItem = (props: ITaskItemProps) => {\r\n    let { task } = props;\r\n    let [updatedTask, setUpdatedTask] = useState({ ...task });\r\n    updatedTask = updatedTask as ITask;\r\n    let isSelected = props.task.id === props.selectedTaskId;\r\n\r\n    const selectTask = () => props.selectTask(task.id);\r\n\r\n    const cancelSelection = () => props.selectTask(null);\r\n\r\n    const handleFormUpdate = (event) => {\r\n        let field = event.target.name;\r\n        updatedTask = { ...updatedTask, [field]: event.target.value }\r\n        setUpdatedTask(updatedTask);\r\n    }\r\n\r\n    const toggleComplete = (event) => {\r\n        updatedTask = { ...updatedTask, complete: event.target.checked };\r\n        setUpdatedTask(updatedTask);\r\n        updateTask(updatedTask);\r\n    }\r\n\r\n    const updateTask = (task?: ITask) => {\r\n        props.updateTask(task);\r\n    }\r\n\r\n    const deleteTask = () => {\r\n        props.deleteTask(task.id);\r\n    }\r\n\r\n    const handleEmitUpdate = (task: ITask) => {\r\n        updatedTask = { ...task };\r\n        setUpdatedTask(updatedTask);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isSelected ?\r\n                    < div style={styles.updateFormStyle}>\r\n                        <button className=\"btn btn-xs btn-success\"\r\n                                style={styles.saveButtonStyle}\r\n                                onClick={() => updateTask(updatedTask)}>save\r\n                        </button>\r\n                        <button className=\"btn btn-xs btn-secondary\"\r\n                                style={styles.editButtonStyle}\r\n                                onClick={cancelSelection}>cancel\r\n                        </button>\r\n                        <button className=\"btn btn-xs btn-danger\"\r\n                                style={styles.deleteButtonStyle}\r\n                                onClick={deleteTask}>Delete\r\n                        </button>\r\n                        <TaskForm handleEmitUpdate={handleEmitUpdate}\r\n                                  task={updatedTask}/>\r\n                        {/*<label htmlFor=\"title\">Task</label>*/}\r\n                        {/*<input id=\"title\"*/}\r\n                        {/*       name=\"title\"*/}\r\n                        {/*       type=\"text\"*/}\r\n                        {/*       value={updatedTask.title}*/}\r\n                        {/*       onChange={handleFormUpdate}/>*/}\r\n                        {/*<label htmlFor=\"desc\">Description</label>*/}\r\n                        {/*<input id=\"desc\"*/}\r\n                        {/*       name=\"description\"*/}\r\n                        {/*       type=\"text\"*/}\r\n                        {/*       value={updatedTask.description}*/}\r\n                        {/*       onChange={handleFormUpdate}/>*/}\r\n                    </div>\r\n                    :\r\n                    <div className=\"task-item\"\r\n                         style={styles.itemStyle}>\r\n                        <button className=\"btn btn-xs btn-primary\"\r\n                                style={isSelected ? styles.none : styles.editButtonStyle}\r\n                                onClick={selectTask}>edit\r\n                        </button>\r\n                        < div>\r\n                            < h3 className=\"task-title\"\r\n                                 style={{\r\n                                     ...styles.headerStyle,\r\n                                     textDecoration: task.complete ? 'strikethrough' : 'none'\r\n                                 }}>{task.title}</h3>\r\n                            <p style={styles.descStyle}>{task.description}</p>\r\n                        </div>\r\n                        <input type=\"checkbox\"\r\n                               checked={updatedTask.complete}\r\n                               onChange={toggleComplete}\r\n                               style={isSelected ? styles.none : styles.completeButtonStyle}/>\r\n                    </div>\r\n            }\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default TaskItem;\r\n","import React, { ChangeEvent, Component, SyntheticEvent } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { ITask } from \"../../shared/types/i-task\";\r\nimport {\r\n    createTask,\r\n    deleteTask,\r\n    fetchTasks,\r\n    filterTasks,\r\n    selectTask,\r\n    updateTask\r\n} from \"../reducers/tasks/task-actions\";\r\nimport TaskItem from \"../components/Task-Item\";\r\nimport TaskForm from \"../components/Task-Form\";\r\nimport { filterTypes } from \"../types/filter-enum\";\r\n\r\ntype ITaskListContainerProps = {\r\n    tasks?: ITask[];\r\n    selectedTaskId;\r\n    fetchItems?: () => any;\r\n    selectTask?: (id: string) => void;\r\n    deleteTask?: (id: string) => void;\r\n    createTask?: (task: ITask) => void\r\n    updateTask?: (task: ITask) => void\r\n    filterTasks?: (filter: string) => void\r\n}\r\n\r\nconst styles = {\r\n    containerStyle: {\r\n        width: '75%'\r\n    },\r\n    horizontal: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        paddingTop: 30,\r\n        paddingBottom: 10\r\n    },\r\n    radioStyle: {\r\n        marginRight: 20\r\n    }\r\n}\r\n\r\nclass TaskListContainer extends Component<ITaskListContainerProps, {}> {\r\n\r\n    public props: ITaskListContainerProps;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.selectTaskForEditing = this.selectTaskForEditing.bind(this);\r\n        this.updateTask = this.updateTask.bind(this);\r\n        this.deleteTask = this.deleteTask.bind(this);\r\n        this.createTask = this.createTask.bind(this);\r\n        this.filterTasks = this.filterTasks.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchItems();\r\n    }\r\n\r\n    selectTaskForEditing(id) {\r\n        this.props.selectTask(id);\r\n    }\r\n\r\n    createTask(newTask: ITask) {\r\n        this.props.createTask(newTask);\r\n    }\r\n\r\n    updateTask(task: ITask) {\r\n        this.props.updateTask(task);\r\n    }\r\n\r\n    deleteTask(id: string) {\r\n        this.props.deleteTask(id);\r\n    }\r\n\r\n    filterTasks(event) {\r\n        let filter = event.target.value;\r\n        this.props.filterTasks(filter);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={styles.containerStyle}>\r\n                <h1>Task list</h1>\r\n                <div>\r\n                    <TaskForm handleSave={this.createTask}/>\r\n                </div>\r\n                <div>\r\n                    <div style={styles.horizontal}>\r\n                        <label htmlFor=\"allRadio\">All</label>\r\n                        <input type=\"radio\"\r\n                               id=\"allRadio\"\r\n                               style={styles.radioStyle}\r\n                               name=\"filter\"\r\n                               onChange={this.filterTasks}\r\n                               value={filterTypes.all}/>\r\n                        <label htmlFor=\"completeRadio\">Complete</label>\r\n                        <input type=\"radio\"\r\n                               id=\"completeRadio\"\r\n                               style={styles.radioStyle}\r\n                               name=\"filter\"\r\n                               onChange={this.filterTasks}\r\n                               value={filterTypes.complete}/>\r\n                        <label htmlFor=\"incompleteRadio\">Incomplete</label>\r\n                        <input type=\"radio\"\r\n                               id=\"incompleteRadio\"\r\n                               style={styles.radioStyle}\r\n                               name=\"filter\"\r\n                               onChange={this.filterTasks}\r\n                               value={filterTypes.incomplete}/>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {\r\n                        this.props.tasks.map((task: ITask) => (\r\n                            <TaskItem key={task.id}\r\n                                      task={task}\r\n                                      selectedTaskId={this.props.selectedTaskId}\r\n                                      selectTask={this.selectTaskForEditing}\r\n                                      updateTask={this.updateTask}\r\n                                      deleteTask={this.deleteTask}/>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps): Partial<ITaskListContainerProps> => ({\r\n    tasks: state.tasks.filteredTasks,\r\n    selectedTaskId: state.tasks.selectedTaskId\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch): Partial<ITaskListContainerProps> => {\r\n    return {\r\n        fetchItems: () => dispatch(fetchTasks(dispatch)),\r\n        selectTask: (id: string) => dispatch(selectTask(dispatch, id)),\r\n        createTask: (task: ITask) => dispatch(createTask(dispatch, task)),\r\n        updateTask: (task: ITask) => dispatch(updateTask(dispatch, task)),\r\n        deleteTask: (id: string) => dispatch(deleteTask(dispatch, id)),\r\n        filterTasks: (filter: filterTypes) => dispatch(filterTasks(dispatch, filter)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListContainer);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TaskListContainer from \"./containers/Task-List-Container\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <TaskListContainer/>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { ITask } from \"../../../shared/types/i-task\";\r\nimport { append, filter, findIndex, lensProp, merge, prepend, propEq, remove, set, update } from 'ramda';\r\nimport { filterTasks, TaskActionsTypes } from \"./task-actions\";\r\nimport { filterTypes } from \"../../types/filter-enum\";\r\n\r\ninterface ITaskReducerState {\r\n    tasks: ITask[];\r\n    filteredTasks: ITask[];\r\n    selectedTaskId: string | null;\r\n    test?: any\r\n}\r\n\r\nconst initialState: ITaskReducerState = {\r\n    tasks: [],\r\n    filteredTasks: [],\r\n    selectedTaskId: null,\r\n};\r\n\r\nconst taskReducer = (state: ITaskReducerState = initialState, action): ITaskReducerState => {\r\n    switch (action.type) {\r\n        case TaskActionsTypes.FETCH_TASKS:\r\n            return merge(state, { tasks: action.payload, filteredTasks: action.payload });\r\n        case TaskActionsTypes.CREATE_TASK:\r\n            return merge(\r\n                state,\r\n                {\r\n                    tasks: append(action.payload, state.tasks),\r\n                    filteredTasks: append(action.payload, state.tasks)\r\n                }\r\n            );\r\n        case TaskActionsTypes.SELECT_TASK:\r\n            return set(lensProp('selectedTaskId'), action.payload, state);\r\n        case TaskActionsTypes.REPLACE_TASK:\r\n            return merge(\r\n                state,\r\n                {\r\n                    tasks: update(\r\n                        findIndex(propEq('id', action.payload.id), state.tasks),\r\n                        action.payload,\r\n                        state.tasks),\r\n                    filteredTasks: update(\r\n                        findIndex(propEq('id', action.payload.id), state.tasks),\r\n                        action.payload,\r\n                        state.tasks),\r\n                    selectedTaskId: null\r\n                }\r\n            );\r\n        case TaskActionsTypes.REMOVE_TASK:\r\n            let updatedTasks = remove(\r\n                findIndex(propEq('id', action.payload), state.tasks),\r\n                1,\r\n                state.tasks);\r\n            return merge(state,\r\n                {\r\n                    tasks: updatedTasks,\r\n                    filteredTasks: updatedTasks\r\n                }\r\n            );\r\n        case TaskActionsTypes.FILTER_TASKS:\r\n            switch (action.payload) {\r\n                case filterTypes.all:\r\n                    return set(\r\n                        lensProp('filteredTasks'),\r\n                        [...state.tasks],\r\n                        state\r\n                    );\r\n                case filterTypes.complete:\r\n                    return set(\r\n                        lensProp('filteredTasks'),\r\n                        filter((task: ITask) => task.complete, [...state.tasks]),\r\n                        state\r\n                    );\r\n                case filterTypes.incomplete:\r\n                    return set(\r\n                        lensProp('filteredTasks'),\r\n                        filter((task: ITask) => !task.complete, [...state.tasks]),\r\n                        state\r\n                    );\r\n                default:\r\n                    return state;\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default taskReducer;\r\n","import {combineReducers} from 'redux'\r\nimport taskReducer from \"./tasks/tasks-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer\r\n})\r\n\r\nexport default rootReducer;\r\n","import {createStore, applyMiddleware} from 'redux'\r\nimport rootReducer from './reducers/root-reducer'\r\nimport thunk from 'redux-thunk';\r\n\r\n/**\r\n * Logs all actions and states after they are dispatched.\r\n */\r\nconst logger = store => next => action => {\r\n    console.group(action.type)\r\n    console.info('dispatching', action)\r\n    let result = next(action)\r\n    console.log('next state', store.getState())\r\n    console.groupEnd()\r\n    return result\r\n}\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk, logger)\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux'\r\nimport store from './store'\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    rootElement\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}